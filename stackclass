#include <iostream>
using namespace std;

template<typename T>
class Stack {
private:
    int top;
    int capacity;
    T* arr;

public:
    Stack(int size) {
        capacity = size;
        arr = new T[capacity];
        top = -1;
    }

    ~Stack() {
        delete[] arr;
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == capacity - 1;
    }

    void push(T x) {
        if (!isFull()) arr[++top] = x;
        else cout << "Stack overflow\n";
    }

    T pop() {
        if (!isEmpty()) return arr[top--];
        cout << "Stack underflow\n";
        return T();
    }

    T peek() {
        if (!isEmpty()) return arr[top];
        cout << "Stack is empty\n";
        return T();
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is empty\n";
            return;
        }
        cout << "Stack (top to bottom): ";
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    int n;
    cout << "Enter stack size: ";
    cin >> n;

    Stack<int> s(n);

    s.push(10);
    s.push(20);
    s.push(30);
    s.display();

    cout << "Popped: " << s.pop() << endl;
    s.display();

    return 0;
}
